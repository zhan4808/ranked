{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///Users/robertzhang/Documents/GitHub/socialmesh/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth';\nimport { PrismaAdapter } from '@auth/prisma-adapter';\nimport { PrismaClient } from '@prisma/client';\nimport LinkedInProvider from 'next-auth/providers/linkedin';\nimport GoogleProvider from 'next-auth/providers/google';\nimport CredentialsProvider from 'next-auth/providers/credentials';\n\n// Extend the User type in the session\ndeclare module 'next-auth' {\n  interface Session {\n    user: {\n      id: string;\n      name?: string | null;\n      email?: string | null;\n      image?: string | null;\n    };\n  }\n}\n\nconst prisma = new PrismaClient();\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    LinkedInProvider({\n      clientId: process.env.LINKEDIN_CLIENT_ID || \"\",\n      clientSecret: process.env.LINKEDIN_CLIENT_SECRET || \"\",\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n    }),\n    // Add a basic credentials provider for development/testing\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        // This is just for testing - in production, you'd want real auth\n        if (credentials?.email === 'test@example.com' && credentials?.password === 'password') {\n          return { \n            id: '1', \n            name: 'Test User', \n            email: 'test@example.com',\n            image: 'https://via.placeholder.com/150'\n          };\n        }\n        return null;\n      }\n    }),\n  ],\n  callbacks: {\n    async session({ session, token }) {\n      if (token.sub) {\n        session.user.id = token.sub;\n      }\n      return session;\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    }\n  },\n  pages: {\n    signIn: '/login',\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  session: {\n    strategy: 'jwt',\n  },\n}; "],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAcA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE;IACvB,WAAW;QACT,CAAA,GAAA,uJAAA,CAAA,UAAgB,AAAD,EAAE;YACf,UAAU,QAAQ,GAAG,CAAC,kBAAkB,IAAI;YAC5C,cAAc,QAAQ,GAAG,CAAC,sBAAsB,IAAI;QACtD;QACA,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;QACA,2DAA2D;QAC3D,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,iEAAiE;gBACjE,IAAI,aAAa,UAAU,sBAAsB,aAAa,aAAa,YAAY;oBACrF,OAAO;wBACL,IAAI;wBACJ,MAAM;wBACN,OAAO;wBACP,OAAO;oBACT;gBACF;gBACA,OAAO;YACT;QACF;KACD;IACD,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,MAAM,GAAG,EAAE;gBACb,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;YAC7B;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,SAAS;QACP,UAAU;IACZ;AACF","debugId":null}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"sources":["file:///Users/robertzhang/Documents/GitHub/socialmesh/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { authOptions } from \"../../../../lib/auth\";\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST }; "],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,6GAAA,CAAA,cAAW","debugId":null}}]
}
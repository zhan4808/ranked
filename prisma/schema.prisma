// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  profile         Profile?
  sentMatches     Match[]   @relation("SentMatches")
  receivedMatches Match[]   @relation("ReceivedMatches")
  messages        Message[]
  subscription    Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id               String   @id @default(cuid())
  userId           String   @unique
  headline         String?
  bio              String?  @db.Text
  industry         String?
  location         String?
  skills           String[] @default([])
  experience       Json[]   @default([])
  education        Json[]   @default([])
  interests        String[] @default([])
  networking_goals String[] @default([])
  last_updated     DateTime @default(now())
  profileViews     Int      @default(0)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Match {
  id              String   @id @default(cuid())
  senderId        String
  receiverId      String
  status          MatchStatus @default(PENDING)
  matchScore      Float
  matchReasons    String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  sender          User     @relation("SentMatches", fields: [senderId], references: [id])
  receiver        User     @relation("ReceivedMatches", fields: [receiverId], references: [id])
  messages        Message[]

  @@unique([senderId, receiverId])
}

model Message {
  id        String   @id @default(cuid())
  matchId   String
  userId    String
  content   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                 String            @id @default(cuid())
  userId             String            @unique
  tier               SubscriptionTier  @default(FREE)
  startDate          DateTime          @default(now())
  endDate            DateTime?
  active             Boolean           @default(true)
  paymentIntentId    String?
  receiptUrl         String?
  analyticsEnabled   Boolean           @default(false)
  priorityMatching   Boolean           @default(false)
  advancedFilters    Boolean           @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
} 